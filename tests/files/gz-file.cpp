// Chemfiles, a modern library for chemistry file reading and writing
// Copyright (C) Guillaume Fraux and contributors -- BSD license

#include "catch.hpp"
#include "helpers.hpp"
#include "chemfiles/files/GzFile.hpp"
#include <fstream>
using namespace chemfiles;

static void check_file(GzFile& file) {
    std::string line = file.readline();
    CHECK(line == "297");

    auto lines = file.readlines(42);
    REQUIRE(lines.size() == 42);
    CHECK(lines[0] == " generated by VMD");
    CHECK(lines[1] == "  O          0.417219        8.303366       11.737172");

    file.rewind();
    line = file.readline();
    CHECK(line == "297");
    line = file.readline();
    CHECK(line == " generated by VMD");
}

TEST_CASE("Read a text file") {
    GzFile file_6("data/xyz/water.6.xyz.gz", File::READ);
    check_file(file_6);

    GzFile file_9("data/xyz/water.9.xyz.gz", File::READ);
    check_file(file_9);
}


TEST_CASE("Write a gz file") {
    auto filename = NamedTempPath(".gz");

    {
        GzFile file(filename, File::WRITE);
        file << "Test" << std::endl;
        file << 5467 << std::endl;
    }

    std::ifstream verification(filename, std::ios::binary);
    REQUIRE(verification.is_open());
    verification.seekg(0, std::ios::end);
    auto size = static_cast<size_t>(verification.tellg());
    verification.seekg(0, std::ios::beg);

    auto content = std::vector<uint8_t>(size);
    verification.read(reinterpret_cast<char*>(content.data()), static_cast<std::streamsize>(size));

    auto expected = std::vector<uint8_t>{
        0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0x0b, 0x49, 0x2d, 0x2e, 0xe1, 0x32,
        0x35, 0x31, 0x33, 0xe7, 0x02, 0x00, 0x8a, 0x43,
        0x5e, 0x98, 0x0a, 0x00, 0x00, 0x00
    };
    CHECK(content == expected);
}
